/**
 * ManufactureController
 *
 * @description :: Server-side actions for handling incoming requests.
 * @help        :: See https://sailsjs.com/docs/concepts/actions
 */

const API_ERRORS = require('../constants/APIErrors');

module.exports = {
  /**
	 * Action for /manufacture/create
	 * @param name, logo
	 * @param res
	 * @returns {*}
	 */
  create: async function (req, res) {
    if (!req.body) {
      return res.badRequest(Utils.jsonErr('Empty body'));
    }

    const user = req.userInfo;

    const name = req.body.name;

    const address = req.body.address;
    const phone = req.body.phone;

    // if (!name) {
    //   return res.badRequest(Utils.jsonErr('Name is required'));
    // }

    // req.file('logo').upload({
    //   // don't allow the total upload size to exceed ~10MB
    //   maxBytes: 10000000,
    //   dirname: require('path').resolve(sails.config.appPath, 'assets/images')
    // }, async function whenDone(err, uploadedFiles) {
    //   if (err) {
    //     return res.serverError('Bi ngay day' + err);
    //   }

    //   // If no files were uploaded, respond with an error.
    //   if (uploadedFiles.length === 0){
    //     return res.badRequest('No file was uploaded');
    //   }

    //   // Get the base URL for our deployed application from our custom config
    //   // (e.g. this might be "http://foobar.example.com:1339" or "https://example.com")
    //   var baseUrl = sails.config.custom.baseUrl;

    //   const form = {
    //     name,
    //     logo: uploadedFiles[0].fd,
    //     owner: user.id
    //   }

    //   if(address) form.address = address;
    //   if(phone) form.phone = phone;

    //   try {
    //     let manufacture = await Manufacture.create(form).fetch();
    //     // if(!manufacture) {return res.badRequest({messge : API_ERRORS.SERVER_ERROR});}
    //     // let logo = require('util').format('%s/manufacture/logo/%s', baseUrl, manufacture.id);
    //     //sails.log("QUERY ISL:::::", uploadedFiles) ;

    //     //manufacture.logo = logo;
    //     sails.log("QUERY ISL:::::", manufacture)
    //     //manufacture = await Manufacture.update(manufacture).fetch();

    //     return res.created(manufacture);
    //   } catch (err){
    //     return res.badRequest({message: err.message});
    //   }
    // });
    const form = {
      name:req.body.name,
      logo: req.body.logo,
      owner: user.id,
      createBy : req.body.idUser
    };

    if(address) {form.address = address;}
    if(phone) {form.phone = phone;}

    try {
      let manufacture = await Manufacture.create(form).fetch();

      return res.created(manufacture);
    } catch (err){
      return res.badRequest({message: err.message});
    }
  },

  /**
	 * Action for /manufacture/find
	 * @param manufactureId, cylinderSerial, type
	 * @param res
	 * @returns {*}
	 */
  find: async function (req, res) {
    const query = req.query;
    if (!query) {
      return errorHandler(res, '1', 'Empty query');
    }
    const manufactureId = query.manufacture_id;
    let cylinderSerial = query.cylinder_serial;
    const owner = query.owner_id;

    // type 1: Admin, 2: mobile
    const type = query.type;
    let credential = {};
    let authorize = true; // current not need
    let manuQuery = {
      owner
    }
    let manufacture = []

    if (!type) {
      return errorHandler(res, '1', 'type is required 1: Admin, 2: Mobile');
    }
    // if (manufactureId) {
    //   credential.manufacture = manufactureId;
    //   manuQuery.id = manufactureId
    // }
      //return res.badRequest(Utils.jsonErr('manufacture_id is required'))
    // if (owner || owner !== '') {
    //     try {
    //       manufacture = await Manufacture.find(manuQuery);// get manufacture of this root
    //       //if(type === '1') credential.manufacture = manufacture.length > 0 ? manufacture[0].id : '#######'; // #### for empty search
    //     } catch (error) {
    //       return res.serverError(error);
    //     }
    //   credential.factory = owner
    // }
  
    if (cylinderSerial) {
      //return res.badRequest(Utils.jsonErr('cylinder_serail is required'))
      if(typeof cylinderSerial === 'string' ) {cylinderSerial = JSON.parse(cylinderSerial);}
      credential.serial = type === '1' ? {contains :cylinderSerial[0]} : { in: cylinderSerial};
    }

    try {

      let cylinders = await Cylinder.find({where: credential}).populate(['manufacture','current','histories', 'exportPlace']);

      cylinders = await Promise.all(cylinders.map(async cylinder => {
        cylinder.histories = await Promise.all(cylinder.histories.map(async history => {
          return await History.findOne({id: history.id}).populate(['to', 'from', 'toArray']);
        }));
        return cylinder;
      }));

      // if(type === "2" && cylinders.length > 0) {
      //   for(let i = 0; i < manufacture.length; i++){
      //       if(manufacture[i].id === cylinders[0].manufacture.id) {
      //         authorize = true; 
      //         break;
      //       }
      //   }
      // }

      return cylinders.length > 0 ? type === '1' ? res.ok(cylinders) : res.ok({authorize, ...cylinders[0]}) : errorHandler(res, type, 'Item not exist');
    } catch (err){
      return errorHandler(res, type, err.message);
    }


  },

  /**
	 * Action for /manufacture/list
	 * @param manufactureId, cylinderSerial
	 * @param res
	 * @returns {*}
	 */
  list: async function (req, res) {
    try {
      const manufactures = await Manufacture.find({where: {owner: req.userInfo.id}}).populate('cylinders');
      return res.ok(manufactures);
    } catch (err){
      return res.badRequest({message: err.message});
    }


  },

};

function errorHandler(res, type, error) {
  // type 1: web, 2: mobile
  return type === '1' ? res.ok(Utils.jsonErr(error)) : res.badRequest(Utils.jsonErr(error))
}

