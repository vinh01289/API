
const USER_TYPE = require('../constants/UserTypes');
/**
 * UserController
 *
 * @description :: Server-side logic for managing Users
 * @help        :: See http://sailsjs.org/#!/documentation/concepts/Controllers
 */
async function validateData(req) {
  const driver = req.body.driver;
  const license_plate = req.body.license_plate;
  const cylinders = req.body.cylinders;
  let from = req.body.from;

  let to = req.body.to;
  const toArray=req.body.toArray;
  const type = req.body.type;
  const userType = req.userInfo.userType;
  let typeForPartner = req.body.typeForPartner;
  let toArrayModel = undefined;
  let toModel = undefined;
  //let fromModel = undefined;

  // FACTORY - GENERAL : EXPORT => toArray
  if (!type) {
    return Utils.jsonErr('Type is required');
  }

  if (type !== 'TURN_BACK' && !from) {
    return Utils.jsonErr('From is required');
  }

  if (type !== 'SALE' && userType !== USER_TYPE.Factory && userType !== USER_TYPE.Fixer && userType !== USER_TYPE.General && !to) {
    return Utils.jsonErr('To is required');
  }

  // if(type === 'GIVE_BACK') {
  //   if(!typeForPartner) {return Utils.jsonErr('typeForPar is requiring when action type is GIVE_BACK');}
  // }
  // if(type=== 'EXPORT' && !!typeForPartner)
  // {

  // }

  // Lấy object user từ from và to
  try {
    toModel = await User.findOne({id: to});
    //fromModel = await User.findOne({id: from});
    toArrayModel = await User.findOne({id: toArray[0]});
  }
  catch (e) {

  }

  if(type === 'EXPORT' && toModel === undefined && toArrayModel === undefined && userType === USER_TYPE.Agency){
    return Utils.jsonErr('Destination to export is missing');
  }
  
  if (!driver && type!=='SALE') {
    return Utils.jsonErr('Driver is required');
  }

  if (!license_plate && type!=='SALE') {
    return Utils.jsonErr('License_plate is required');
  }
  if((type==='EXPORT' || type === 'IMPORT') && !!typeForPartner)
  {
    //validate for sub type here
  }
  else{


    if (!cylinders || cylinders === []) {
      return Utils.jsonErr('Cylinders is required');
    }

    //Check status of Cylinder - Current removed status from system so we don't need to check
    // const emptyCylinders = _.takeWhile(cylinders, cylinder => { return cylinder.status === 'EMPTY';});
    // if(emptyCylinders.length > 0) {
    //   let serials = '';
    //   for(let i = 0; i < emptyCylinders.length; i++) {
    //     if(i !== 0) {serials = serials.concat(';');}
    //     serials = serials.concat(` ${emptyCylinders[i].serial}`);
    //   }

    //   if(type === 'IMPORT' && fromModel.userType !== USER_TYPE.Station) {

    //     return Utils.jsonErr(`Cylinders with serial ${serials} for import cannot empty`);
    //   }

    //   if(type === 'EXPORT' && !(fromModel.userType === USER_TYPE.Factory && toArrayModel.userType === USER_TYPE.Station) && !(fromModel.userType === USER_TYPE.Station && toModel.userType === USER_TYPE.Factory)) {
    //     return Utils.jsonErr(`Cylinders with serial ${serials} for export cannot empty`);
    //   }
    // }
  }

  return null;
}

module.exports = {
  /**
	 * Action for /history/create
	 * @param email, password, password_confirm
	 * @param res
	 * @returns {*}
	 */
  importCylinder: async function (req, res) {

    if (!req.body) {
      return res.ok(Utils.jsonErr('Empty body'));
    }
    const type = req.body.type;
    // if(type === 'TURN_BACK_NOT_IN_SYSTEM')
    // {
    //   const driver = req.body.driver;
    //   const license_plate = req.body.license_plate;
    //   let to = req.body.to;
    //   let from = null;
    //   let numberOfCylinder = req.body.numberOfCylinder;

    //   // Validate request để đảm bảo params truyền lên đủ yêu cầu
    //   //const error = await validateData(req, toModel, fromModel);
    //   //if (error) {return res.ok(error);}

    //   // Tính tổng amount của những bình truyền lên
    //   let result = await History.create({
    //     driver,
    //     license_plate,
    //     from,
    //     to,
    //     type,
    //     numberOfCylinder,
    //     amount:0
    //   }).fetch();

    //   return res.created(result);

    // }
    // else{
      
    //const createBy = req.body.idUser
    const driver = req.body.driver;
    const license_plate = req.body.license_plate;
    const cylinders = req.body.cylinders;
    const signature = req.body.signature;
    const idDriver = req.body.idDriver;
    let typeForPartner = req.body.typeForPartner;
    let from = req.body.from;
    let saler=req.body.saler;
    let exportPlace;

    let customer = null;

    let to = req.body.to;
    let numberOfCylinder=0;
    let cylindersWithoutSerial = !!req.body.cylindersWithoutSerial ? req.body.cylindersWithoutSerial :  0;
    if(!!req.body.cylinders)
    {
      numberOfCylinder = req.body.cylinders.length;
    }

    if(cylindersWithoutSerial !== 0) {
      numberOfCylinder += cylindersWithoutSerial;
    }

    const numberArray=req.body.numberArray;
    const toArray=req.body.toArray;
    let toModel = undefined;
    let fromModel = undefined;
    // Validate request để đảm bảo params truyền lên đủ yêu cầu
    const error = await validateData(req);
    if(!typeForPartner) {typeForPartner = '';}
    if (error) {return res.ok(error);}

    // if((type=== 'IMPORT' || type==='EXPORT') && !!typeForPartner)
    // {
    //   numberOfCylinder = req.body.numberOfCylinder;
    //   let result = await History.create({
    //     driver,
    //     license_plate,
    //     from,
    //     to,
    //     type,
    //     numberOfCylinder,
    //     typeForPartner
    //   }).fetch();

    //   return res.created(result);
    // }
    //else{
    let newCyLinders=[];
    for(let i =0; i<cylinders.length; i++)
    {
      let itemCylinder = await Cylinder.findOne({id:cylinders[i]}).populate('histories').populate('current');
      if(typeof itemCylinder.histories !== 'undefined' && itemCylinder.histories !==null && itemCylinder.histories.length>0)
      {
        let final=itemCylinder.histories[itemCylinder.histories.length-1];
        try {
          final = await History.findOne(final).populate('toArray');
        } catch (error) {

        }
        if (type === 'EXPORT') {
          if(itemCylinder.current.id===from || itemCylinder.placeStatus === 'IN_FACTORY')
          {
            newCyLinders.push(cylinders[i]);
          }
        }
        else if(type=== 'IMPORT')
        {
          //check lai && (final.to === to||final.toArray.indexOf(to) !==-1)
          if(itemCylinder.placeStatus === 'DELIVERING' && (final.to === to || _.find(final.toArray, o => {return o.id === to;}) !== undefined))
          {
            newCyLinders.push(cylinders[i]);
          }
        }
        // else if(type=== 'GIVE_BACK')
        // {
        //   newCyLinders.push(cylinders[i]);
        // }
        else if(type === 'SALE')
        {
          if(itemCylinder.current.id===from)
          {
            newCyLinders.push(cylinders[i]);
          }
        }
        else if (type==='TURN_BACK')
        {
          //if(itemCylinder.placeStatus==='IN_CUSTOMER'||itemCylinder.placeStatus==='UNKNOW'){
          newCyLinders.push(cylinders[i]);
          //}
        }
      }
      else{
        newCyLinders.push(cylinders[i]);
      }
    }
    console.log('Danh sach binh: ', newCyLinders);
    if(newCyLinders.length !== cylinders.length)
    {
      return res.ok(Utils.jsonErr('Danh sách bình không chính xác!!!'));
    }

    // Tính tổng amount của những bình truyền lên
    let amount = 0;
    /*amount=await Cylinder.sum('currentSalePrice').where({_id: {in: cylinders}})*/
    try {
      const saledCylinders = await Cylinder.find({id : newCyLinders});
      for(let i = 0; i < saledCylinders.length; i++) {
        amount = amount + Number(saledCylinders[i].currentSalePrice !== 0 ? saledCylinders[i].currentSalePrice : saledCylinders[i].currentImportPrice);
      }
    } catch (error) {
      amount = 0;
    }


    let result = await History.create({
      driver,
      license_plate,
      cylinders,
      signature,
      idDriver,
      from,
      to,
      type,
      toArray,
      numberArray,
      numberOfCylinder,
      cylindersWithoutSerial,
      amount,
      saler,
      typeForPartner,
      //createBy
    });

    // Kiểm tra from to và type của history để set placeStatus
    let placeStatus = 'IN_FACTORY';
    let current = null;
    let status = 'EMPTY';
    let pushGas=false;

    try {
      toModel = await User.findOne({id: to});
      if (type !== 'TURN_BACK' && !!from) {
        fromModel = await User.findOne({id: from});
      }

    }
    catch (e) {

    }

    if (type === 'EXPORT') {
      placeStatus = 'DELIVERING';
      current = from;
      if(typeForPartner === '' && fromModel.userType === USER_TYPE.Factory) {exportPlace = from;}
    }

    if (type === 'IMPORT') {
      if (toModel.userType === USER_TYPE.Factory) {placeStatus = 'IN_FACTORY';}
      if (toModel.userType === USER_TYPE.Fixer) {placeStatus = 'IN_REPAIR';}
      if (toModel.userType === USER_TYPE.General) {placeStatus = 'IN_GENERAL';}
      if (toModel.userType === USER_TYPE.Agency) {placeStatus = 'IN_AGENCY';}
      current = to;
    }
    // if (type === 'GIVE_BACK') { // Trả về cho nhà máy
    //   placeStatus = 'DELIVERING';
    //   current = from;
    // }
    if (type === 'TURN_BACK') { // Nhà máy nhận bình trả về
      if (toModel.userType === 'Factory') {
        placeStatus = 'IN_FACTORY';
        //status = 'EMPTY';
        //pushGas=true;
      }
      current = to;
    }
    if (type === 'SALE') {
      /*if (toModel.userType === 'Normal') placeStatus = 'IN_CUSTOMER'
        current = to*/
      placeStatus = 'IN_CUSTOMER';
      current = from;
      if(!req.body.nameCustomer || !req.body.addressCustomer || req.body.nameCustomer === '' || req.body.addressCustomer === '') {return req.badRequest('Missing customer infomation');}
      let form = {
        name: req.body.nameCustomer,
        address: req.body.addressCustomer,
        phone: req.body.phoneCustomer,
        owner: req.userInfo.id
      };
      try{
        customer = await Customer.findOrCreate({phone: req.body.phone, owner: req.userInfo.id}, form);
        if(customer) {
          result = await History.update({_id: result.id})
            .set({customer: customer.id,saler:req.userInfo.id}).fetch();
        }
      }
      catch (e) {
        console.log('Error::::', e);
      }

    }

    // Kiểm tra from to và type của history để set trạng thái đủ gas hay chưa
    // if (type === 'EXPORT' && fromModel !== null && fromModel.userType === 'Station') {
    //   status = 'FULL';
    //   pushGas=true;
    //   console.log("vao");
    // }

    //Check exportPlace

    let updateForm = {
      placeStatus: placeStatus,
      current: current,
      // updateBy: idUser
    };

    if(exportPlace) {
      updateForm.exportPlace = exportPlace;
    }

    if (!result) {return res.ok(Utils.jsonErr(result.err));}
    let resultUpdated =null;
    // Update placeStatus của những bình truyền lên
    if(pushGas) { updateForm.status = status;}
    resultUpdated = await Cylinder.update({_id: {in: cylinders}})
                  .set(updateForm)
                  .fetch();

    if (!resultUpdated) {return res.ok(Utils.jsonErr(result.err));}

    return res.created(result.data);
    //}
    //}
  },
};
